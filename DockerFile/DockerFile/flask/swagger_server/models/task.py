# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Task(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, icon: str=None, title: str=None, desc: str=None, money: float=None, max_num: int=None, part_num: int=None, is_commited: bool=None):  # noqa: E501
        """Task - a model defined in Swagger

        :param id: The id of this Task.  # noqa: E501
        :type id: str
        :param icon: The icon of this Task.  # noqa: E501
        :type icon: str
        :param title: The title of this Task.  # noqa: E501
        :type title: str
        :param desc: The desc of this Task.  # noqa: E501
        :type desc: str
        :param money: The money of this Task.  # noqa: E501
        :type money: float
        :param max_num: The max_num of this Task.  # noqa: E501
        :type max_num: int
        :param part_num: The part_num of this Task.  # noqa: E501
        :type part_num: int
        :param is_commited: The is_commited of this Task.  # noqa: E501
        :type is_commited: bool
        """
        self.swagger_types = {
            'id': str,
            'icon': str,
            'title': str,
            'desc': str,
            'money': float,
            'max_num': int,
            'part_num': int,
            'is_commited': bool
        }

        self.attribute_map = {
            'id': 'id',
            'icon': 'icon',
            'title': 'title',
            'desc': 'desc',
            'money': 'money',
            'max_num': 'maxNum',
            'part_num': 'partNum',
            'is_commited': 'isCommited'
        }

        self._id = id
        self._icon = icon
        self._title = title
        self._desc = desc
        self._money = money
        self._max_num = max_num
        self._part_num = part_num
        self._is_commited = is_commited

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Task.


        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Task.


        :param id: The id of this Task.
        :type id: str
        """

        self._id = id

    @property
    def icon(self) -> str:
        """Gets the icon of this Task.

        the issuer's head pic  # noqa: E501

        :return: The icon of this Task.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon: str):
        """Sets the icon of this Task.

        the issuer's head pic  # noqa: E501

        :param icon: The icon of this Task.
        :type icon: str
        """

        self._icon = icon

    @property
    def title(self) -> str:
        """Gets the title of this Task.


        :return: The title of this Task.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Task.


        :param title: The title of this Task.
        :type title: str
        """

        self._title = title

    @property
    def desc(self) -> str:
        """Gets the desc of this Task.


        :return: The desc of this Task.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc: str):
        """Sets the desc of this Task.


        :param desc: The desc of this Task.
        :type desc: str
        """

        self._desc = desc

    @property
    def money(self) -> float:
        """Gets the money of this Task.


        :return: The money of this Task.
        :rtype: float
        """
        return self._money

    @money.setter
    def money(self, money: float):
        """Sets the money of this Task.


        :param money: The money of this Task.
        :type money: float
        """

        self._money = money

    @property
    def max_num(self) -> int:
        """Gets the max_num of this Task.


        :return: The max_num of this Task.
        :rtype: int
        """
        return self._max_num

    @max_num.setter
    def max_num(self, max_num: int):
        """Sets the max_num of this Task.


        :param max_num: The max_num of this Task.
        :type max_num: int
        """

        self._max_num = max_num

    @property
    def part_num(self) -> int:
        """Gets the part_num of this Task.

        the num of participants.  # noqa: E501

        :return: The part_num of this Task.
        :rtype: int
        """
        return self._part_num

    @part_num.setter
    def part_num(self, part_num: int):
        """Sets the part_num of this Task.

        the num of participants.  # noqa: E501

        :param part_num: The part_num of this Task.
        :type part_num: int
        """

        self._part_num = part_num

    @property
    def is_commited(self) -> bool:
        """Gets the is_commited of this Task.


        :return: The is_commited of this Task.
        :rtype: bool
        """
        return self._is_commited

    @is_commited.setter
    def is_commited(self, is_commited: bool):
        """Sets the is_commited of this Task.


        :param is_commited: The is_commited of this Task.
        :type is_commited: bool
        """

        self._is_commited = is_commited
