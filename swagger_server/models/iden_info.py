# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IdenInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        name: str = None,
        sex: str = None,
        iden_type: str = None,
        tel: str = None,
        school: str = None,
        company: str = None,
        id: str = None,
        cert: str = None,
    ):  # noqa: E501
        """IdenInfo - a model defined in Swagger

        :param name: The name of this IdenInfo.  # noqa: E501
        :type name: str
        :param sex: The sex of this IdenInfo.  # noqa: E501
        :type sex: str
        :param iden_type: The iden_type of this IdenInfo.  # noqa: E501
        :type iden_type: str
        :param tel: The tel of this IdenInfo.  # noqa: E501
        :type tel: str
        :param school: The school of this IdenInfo.  # noqa: E501
        :type school: str
        :param company: The company of this IdenInfo.  # noqa: E501
        :type company: str
        :param id: The id of this IdenInfo.  # noqa: E501
        :type id: str
        :param cert: The cert of this IdenInfo.  # noqa: E501
        :type cert: str
        """
        self.swagger_types = {
            "name": str,
            "sex": str,
            "iden_type": str,
            "tel": str,
            "school": str,
            "company": str,
            "id": str,
            "cert": str,
        }

        self.attribute_map = {
            "name": "name",
            "sex": "sex",
            "iden_type": "idenType",
            "tel": "tel",
            "school": "school",
            "company": "company",
            "id": "id",
            "cert": "cert",
        }

        self._name = name
        self._sex = sex
        self._iden_type = iden_type
        self._tel = tel
        self._school = school
        self._company = company
        self._id = id
        self._cert = cert

    @classmethod
    def from_dict(cls, dikt) -> "IdenInfo":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IdenInfo of this IdenInfo.  # noqa: E501
        :rtype: IdenInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this IdenInfo.


        :return: The name of this IdenInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IdenInfo.


        :param name: The name of this IdenInfo.
        :type name: str
        """

        self._name = name

    @property
    def sex(self) -> str:
        """Gets the sex of this IdenInfo.


        :return: The sex of this IdenInfo.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this IdenInfo.


        :param sex: The sex of this IdenInfo.
        :type sex: str
        """

        self._sex = sex

    @property
    def iden_type(self) -> str:
        """Gets the iden_type of this IdenInfo.


        :return: The iden_type of this IdenInfo.
        :rtype: str
        """
        return self._iden_type

    @iden_type.setter
    def iden_type(self, iden_type: str):
        """Sets the iden_type of this IdenInfo.


        :param iden_type: The iden_type of this IdenInfo.
        :type iden_type: str
        """

        self._iden_type = iden_type

    @property
    def tel(self) -> str:
        """Gets the tel of this IdenInfo.


        :return: The tel of this IdenInfo.
        :rtype: str
        """
        return self._tel

    @tel.setter
    def tel(self, tel: str):
        """Sets the tel of this IdenInfo.


        :param tel: The tel of this IdenInfo.
        :type tel: str
        """

        self._tel = tel

    @property
    def school(self) -> str:
        """Gets the school of this IdenInfo.


        :return: The school of this IdenInfo.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school: str):
        """Sets the school of this IdenInfo.


        :param school: The school of this IdenInfo.
        :type school: str
        """

        self._school = school

    @property
    def company(self) -> str:
        """Gets the company of this IdenInfo.


        :return: The company of this IdenInfo.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this IdenInfo.


        :param company: The company of this IdenInfo.
        :type company: str
        """

        self._company = company

    @property
    def id(self) -> str:
        """Gets the id of this IdenInfo.

        student id or worker id  # noqa: E501

        :return: The id of this IdenInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this IdenInfo.

        student id or worker id  # noqa: E501

        :param id: The id of this IdenInfo.
        :type id: str
        """

        self._id = id

    @property
    def cert(self) -> str:
        """Gets the cert of this IdenInfo.

        user's cert path  # noqa: E501

        :return: The cert of this IdenInfo.
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert: str):
        """Sets the cert of this IdenInfo.

        user's cert path  # noqa: E501

        :param cert: The cert of this IdenInfo.
        :type cert: str
        """

        self._cert = cert
