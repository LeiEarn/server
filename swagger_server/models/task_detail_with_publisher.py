# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.task_detail import TaskDetail  # noqa: F401,E501
from swagger_server.models.user_info_with_tel import UserInfoWithTel  # noqa: F401,E501
from swagger_server import util


class TaskDetailWithPublisher(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        user: UserInfoWithTel = None,
        content: TaskDetail = None,
        has_received: int = None,
    ):  # noqa: E501
        """TaskDetailWithPublisher - a model defined in Swagger

        :param user: The user of this TaskDetailWithPublisher.  # noqa: E501
        :type user: UserInfoWithTel
        :param content: The content of this TaskDetailWithPublisher.  # noqa: E501
        :type content: TaskDetail
        :param has_received: The has_received of this TaskDetailWithPublisher.  # noqa: E501
        :type has_received: int
        """
        self.swagger_types = {
            "user": UserInfoWithTel,
            "content": TaskDetail,
            "has_received": int,
        }

        self.attribute_map = {
            "user": "user",
            "content": "content",
            "has_received": "hasReceived",
        }

        self._user = user
        self._content = content
        self._has_received = has_received

    @classmethod
    def from_dict(cls, dikt) -> "TaskDetailWithPublisher":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskDetailWithPublisher of this TaskDetailWithPublisher.  # noqa: E501
        :rtype: TaskDetailWithPublisher
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user(self) -> UserInfoWithTel:
        """Gets the user of this TaskDetailWithPublisher.


        :return: The user of this TaskDetailWithPublisher.
        :rtype: UserInfoWithTel
        """
        return self._user

    @user.setter
    def user(self, user: UserInfoWithTel):
        """Sets the user of this TaskDetailWithPublisher.


        :param user: The user of this TaskDetailWithPublisher.
        :type user: UserInfoWithTel
        """

        self._user = user

    @property
    def content(self) -> TaskDetail:
        """Gets the content of this TaskDetailWithPublisher.


        :return: The content of this TaskDetailWithPublisher.
        :rtype: TaskDetail
        """
        return self._content

    @content.setter
    def content(self, content: TaskDetail):
        """Sets the content of this TaskDetailWithPublisher.


        :param content: The content of this TaskDetailWithPublisher.
        :type content: TaskDetail
        """

        self._content = content

    @property
    def has_received(self) -> int:
        """Gets the has_received of this TaskDetailWithPublisher.

        0 stands for hasn't, 1 stands for has received, 2 stands for under review, 3 stands for has completed  # noqa: E501

        :return: The has_received of this TaskDetailWithPublisher.
        :rtype: int
        """
        return self._has_received

    @has_received.setter
    def has_received(self, has_received: int):
        """Sets the has_received of this TaskDetailWithPublisher.

        0 stands for hasn't, 1 stands for has received, 2 stands for under review, 3 stands for has completed  # noqa: E501

        :param has_received: The has_received of this TaskDetailWithPublisher.
        :type has_received: int
        """

        self._has_received = has_received
