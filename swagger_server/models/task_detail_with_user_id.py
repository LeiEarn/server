# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.task_detail import TaskDetail  # noqa: F401,E501
from swagger_server import util


class TaskDetailWithUserId(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str = None, content: TaskDetail = None):  # noqa: E501
        """TaskDetailWithUserId - a model defined in Swagger

        :param user_id: The user_id of this TaskDetailWithUserId.  # noqa: E501
        :type user_id: str
        :param content: The content of this TaskDetailWithUserId.  # noqa: E501
        :type content: TaskDetail
        """
        self.swagger_types = {"user_id": str, "content": TaskDetail}

        self.attribute_map = {"user_id": "userId", "content": "content"}

        self._user_id = user_id
        self._content = content

    @classmethod
    def from_dict(cls, dikt) -> "TaskDetailWithUserId":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskDetailWithUserId of this TaskDetailWithUserId.  # noqa: E501
        :rtype: TaskDetailWithUserId
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this TaskDetailWithUserId.


        :return: The user_id of this TaskDetailWithUserId.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this TaskDetailWithUserId.


        :param user_id: The user_id of this TaskDetailWithUserId.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def content(self) -> TaskDetail:
        """Gets the content of this TaskDetailWithUserId.


        :return: The content of this TaskDetailWithUserId.
        :rtype: TaskDetail
        """
        return self._content

    @content.setter
    def content(self, content: TaskDetail):
        """Sets the content of this TaskDetailWithUserId.


        :param content: The content of this TaskDetailWithUserId.
        :type content: TaskDetail
        """

        self._content = content
